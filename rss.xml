<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Tomás Delvechio</title><link>http://tomasdelvechio.github.io/</link><description>Sitio Academico de Tomas Delvechio</description><atom:link rel="self" type="application/rss+xml" href="http://tomasdelvechio.github.io/rss.xml"></atom:link><language>es</language><copyright>Contents © 2018 &lt;a href="mailto:tdelvechio@unlu.edu.ar"&gt;Tomás Delvechio&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sat, 08 Sep 2018 20:35:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Introducción a Spark</title><link>http://tomasdelvechio.github.io/blog/introduccion-a-spark/</link><dc:creator>Tomás Delvechio</dc:creator><description>&lt;div&gt;&lt;p&gt;Apache Spark es un framework de procesamiento muy de moda en entornos de procesamiento para Big Data, IoT y Machine Learning.&lt;/p&gt;
&lt;h3&gt;Pipeline&lt;/h3&gt;
&lt;p&gt;El pipeline de trabajo en spark es conocido como &lt;strong&gt;DAG&lt;/strong&gt; (Directed Acyclic Graph) y se basa en armar un grafo de trabajo donde las tareas se sucedan unas a otras segun se establezca.&lt;/p&gt;
&lt;p&gt;Ademas, propone que muchas operaciones que en MapReduce involucran operaciones de entrada salida a disco, se hagan en memoria principal, lo que genera un rendimiento mayor comparado con su predecesor.&lt;/p&gt;
&lt;h3&gt;Lenguajes&lt;/h3&gt;
&lt;p&gt;Spark acepta Java, Scala, Python y R, aunque no todos estan soportados de la misma forma y de manera completa.&lt;/p&gt;
&lt;h3&gt;Otras herramientas&lt;/h3&gt;
&lt;p&gt;Spark ofrece ademas una consola interactiva para Scala, Python y R con capacidades &lt;strong&gt;REPL&lt;/strong&gt; (Read, Evaluate, Print y Loop).&lt;/p&gt;
&lt;p&gt;Ademas del core, Spark ofrece algunas librerias para tareas comunes en el ambito de big data: &lt;em&gt;SparkSQL&lt;/em&gt;, &lt;em&gt;Spark Streaming&lt;/em&gt;, &lt;em&gt;Spark MLlib&lt;/em&gt; y &lt;em&gt;Spark GraphX&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Es posible vincular Spark a una Notebook de Jupyter y trabajar desde la interfaz de esta herramienta para hacer pruebas. (TODO: Agregar link a la notebook).&lt;/p&gt;
&lt;h3&gt;Arquitectura&lt;/h3&gt;
&lt;p&gt;Una aplicación Spark consta de un master, que dependiendo de la plataforma puede ser &lt;em&gt;Spark Master&lt;/em&gt; (standalone) &lt;em&gt;Mesos Master&lt;/em&gt; (Apache Mesos) o &lt;em&gt;ResourceManager&lt;/em&gt; (Apache Hadoop - YARN). Luego un proceso driver que se conoce como SparkContext y por ultimo de los workers.&lt;/p&gt;&lt;/div&gt;</description><category>big data</category><category>distributed systems</category><category>programming</category><category>spark</category><guid>http://tomasdelvechio.github.io/blog/introduccion-a-spark/</guid><pubDate>Sat, 08 Sep 2018 18:15:18 GMT</pubDate></item><item><title>Automatizando deploy con Helm</title><link>http://tomasdelvechio.github.io/blog/automatizando-deploy-con-helm/</link><dc:creator>Tomás Delvechio</dc:creator><description>&lt;div&gt;&lt;h2&gt;Automatizando Deploy con Helm&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Tener un cluster kubernetes andando y corriendo (por ejemplo minikube)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ minikube start
&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;Instalar Helm y Tiller&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tiller es un servidor in cluster de helm (Se instala en el cluster). Para mas detalle, ver la &lt;a href="https://docs.helm.sh/using_helm/#quickstart"&gt;doc oficial&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ helm init
Creating /home/tomas/.helm
Creating /home/tomas/.helm/repository
Creating /home/tomas/.helm/repository/cache
Creating /home/tomas/.helm/repository/local
Creating /home/tomas/.helm/plugins
Creating /home/tomas/.helm/starters
Creating /home/tomas/.helm/cache/archive
Creating /home/tomas/.helm/repository/repositories.yaml
Adding stable repo with URL: https://kubernetes-charts.storage.googleapis.com
Adding &lt;span class="nb"&gt;local&lt;/span&gt; repo with URL: http://127.0.0.1:8879/charts
&lt;span class="nv"&gt;$HELM_HOME&lt;/span&gt; has been configured at /home/tomas/.helm.

Tiller &lt;span class="o"&gt;(&lt;/span&gt;the Helm server-side component&lt;span class="o"&gt;)&lt;/span&gt; has been installed into your Kubernetes Cluster.

Please note: by default, Tiller is deployed with an insecure &lt;span class="s1"&gt;'allow unauthenticated users'&lt;/span&gt; policy.
For more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation
Happy Helming!
&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;Actualizar Respositorio de Charts&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Los programas que se instalan via Helm se llaman Charts. Antes de instalar un chart, se debe actualizar la lista de charts disponibles&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;helm repo update
Hang tight while we grab the latest from your chart repositories...
...Skip local chart repository
...Successfully got an update from the "stable" chart repository
Update Complete. ⎈ Happy Helming!⎈
&lt;/pre&gt;&lt;/div&gt;</description><guid>http://tomasdelvechio.github.io/blog/automatizando-deploy-con-helm/</guid><pubDate>Sat, 28 Apr 2018 19:22:28 GMT</pubDate></item><item><title>Curso de Git</title><link>http://tomasdelvechio.github.io/blog/curso-de-git/</link><dc:creator>Tomás Delvechio</dc:creator><description>&lt;div&gt;&lt;p&gt;El sabado 07 de Abril de 2018 estuvimos haciendo un taller de GIT en la UNLu. &lt;/p&gt;
&lt;p&gt;Fue una experiencia muy interesante. Esperabamos muy poca gente y sin embargo el aula se lleno durante las 3 horas y media que duró el taller. Para algunos usar Git es algo tan omnipresente, que a veces cometemos el error de creer que &lt;em&gt;es facil&lt;/em&gt; o que &lt;em&gt;todos lo usan&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Durante mas de 3 horas, 38 personas con conocimientos muy diverso respecto a computación estuvieron aprendiendo como usar Git, surgieron dudas muy interesantes y creo que todos nos llevamos algo nuevo.&lt;/p&gt;
&lt;p&gt;El material que se utilizó esta &lt;a href="https://docs.google.com/presentation/d/1LAns3-PGIOVf2KiMyw1sS4Uy7LaGV-bUPlJDQ22gDrc/edit?usp=sharing"&gt;disponible aca&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>charlas</category><category>git</category><category>vcs</category><guid>http://tomasdelvechio.github.io/blog/curso-de-git/</guid><pubDate>Sat, 14 Apr 2018 15:09:54 GMT</pubDate></item><item><title>Kompose: Migrar tus archivos Docker Compose a Kubernetes</title><link>http://tomasdelvechio.github.io/blog/kompose-migrar-tus-archivos-docker-compose-a-kubernetes/</link><dc:creator>Tomás Delvechio</dc:creator><description>&lt;div&gt;&lt;p&gt;En un &lt;a href="http://tomasdelvechio.github.io/blog/algunas-notas-sobre-kubernetes"&gt;post anterior&lt;/a&gt; desplegamos un
cluster de pruebas con contenedores usando &lt;a href="https://kubernetes.io"&gt;Kubernetes&lt;/a&gt; y
&lt;a href="https://github.com/kubernetes/minikube"&gt;Minikube&lt;/a&gt;. Este esquema resulta util
cuando lo que se quiere es desplegar y escalar un contenedor.&lt;/p&gt;
&lt;p&gt;Sin embargo, muchas aplicaciones Docker comenzaron a orquestarse utilizando mas
de un contenedor para hacer funcionar la misma. Por ejemplo, un contenedor con
un web server, otro para la base de datos relacional, y un tercero para una base
nosql.&lt;/p&gt;
&lt;p&gt;Para este tipo de esquemas surgio docker-compose. Permitia de forma sencilla
administrar la configuracion varios contenedores en simultaneo cuya imagen
origen eran diferentes.&lt;/p&gt;
&lt;p&gt;Para lograr un comportamiento similar con Kubernetes, existe la herramienta
&lt;a href="http://kompose.io"&gt;Kompose&lt;/a&gt;. Kompose nos permite tomar el contenido de un
archivo docker-compose.yml y realizar las mismas acciones, pero utilizando
Kubernetes.&lt;/p&gt;
&lt;h3&gt;Uso basico&lt;/h3&gt;
&lt;p&gt;Como siempre, nos salteamos la parte de instalacion dado que es sencilla y se
encuentra documentada en la &lt;a href="http://kompose.io/installation/"&gt;pagina oficial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kompose es muy sencilla de utilizar. Puede hacer 2 tareas principales:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tomar un archivo docker-compose.yml y convertirlo a archivos de configuracion
 de Kubernetes.&lt;/li&gt;
&lt;li&gt;Ejecutar el archivo docker-compose.yml directamente sin generar nuevos
 archivos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La forma mas sencilla de utilizar es la segunda, dado que contamos con un
proyecto con un archivo docker-compose.yml o en general conocemos ese formato
bastante. Entonces se ejecuta&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kompose up
&lt;/pre&gt;


&lt;p&gt;y eso ya levanta con Kubernetes todos los contenedores indicados.&lt;/p&gt;
&lt;h3&gt;Troubleshooting&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kompose up

WARN Unsupported root level volumes key - ignoring 
WARN Unsupported depends_on key - ignoring        
WARN Volume mount on the host "." isn't supported - ignoring path on the host
&lt;/pre&gt;&lt;/div&gt;</description><category>cluster</category><category>containers</category><category>deploy</category><category>devops</category><category>kompose</category><category>kubernetes</category><category>orchestration</category><guid>http://tomasdelvechio.github.io/blog/kompose-migrar-tus-archivos-docker-compose-a-kubernetes/</guid><pubDate>Sun, 04 Feb 2018 19:28:51 GMT</pubDate></item><item><title>Configuración para Sublime Text 3</title><link>http://tomasdelvechio.github.io/blog/configuracion-para-sublime-text-3/</link><dc:creator>Tomás Delvechio</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="Logo Sublime Text 3" src="http://tomasdelvechio.github.io/img/blog/2018/logo-sublime-text-3.png" title="Logo de Sublime Text 3"&gt;&lt;/p&gt;
&lt;p&gt;Soy usuario activo de Sublime Text 3. Para proyectos pequeños o creacion de
scripts, es el editor con el que me siento mas comodo trabajando.&lt;/p&gt;
&lt;p&gt;La configuración default que tiene visual tiene algunos problemas. Lo primero
que hago al instalar Sublime es editar un par de estas configuraciones, y dejo
aca el archivo de configuración tal como lo tengo actualmente&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;{
    "bold_folder_labels": true,
    "caret_style": "phase",
    "draw_white_space": "all",
    "fade_fold_buttons": false,
    "font_face": "Inconsolata",
    "font_size": 12,
    "highlight_line": true,
    "highlight_modified_tabs": true,
    "ignored_packages":
    [
        "Vintage"
    ],
    "line_padding_bottom": 5.5,
    "line_padding_top": 5.5,
    "rulers":
    [
        80,
        120
    ],
    "tab_size": 4,
    "trim_trailing_white_space_on_save": true
}
&lt;/pre&gt;


&lt;h4&gt;Sobre las fuentes&lt;/h4&gt;
&lt;p&gt;La configuración &lt;code&gt;font_face&lt;/code&gt; indica la fuente utilizada. Inconsolata no es una
fuente que venga instalada por default. Para instalarla en Ubuntu, por ejemplo:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;sudo apt install fonts-inconsolata
&lt;/pre&gt;


&lt;h3&gt;Plugines&lt;/h3&gt;
&lt;p&gt;Ademas de la configuración visual, Sublime tiene una amplia cantidad de plugins.&lt;/p&gt;
&lt;p&gt;Aca va un listado de los que actualmente estoy utilizando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All Autocomplete&lt;/li&gt;
&lt;li&gt;BracketHighlighter&lt;/li&gt;
&lt;li&gt;DocBlockr&lt;/li&gt;
&lt;li&gt;GitGutter&lt;/li&gt;
&lt;li&gt;Laravel Blade Highlighter&lt;/li&gt;
&lt;li&gt;PHP Companion&lt;/li&gt;
&lt;li&gt;SublimeCodeIntel&lt;/li&gt;
&lt;li&gt;SublimeLinter-php&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Temas&lt;/h3&gt;
&lt;p&gt;Existen muchisimos temas para Sublime. Puntualmente estoy en estos momentos
utilizando &lt;a href="https://github.com/kenwheeler/brogrammer-theme"&gt;Brogrammer&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>dev</category><category>programming</category><category>sublime</category><category>tools</category><guid>http://tomasdelvechio.github.io/blog/configuracion-para-sublime-text-3/</guid><pubDate>Sat, 03 Feb 2018 15:15:40 GMT</pubDate></item><item><title>Algunas notas sobre Kubernetes</title><link>http://tomasdelvechio.github.io/blog/algunas-notas-sobre-kubernetes/</link><dc:creator>Tomás Delvechio</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="Logo Kubernetes" src="http://tomasdelvechio.github.io/img/blog/2018/logo-kubernetes.png" title="Logo de Kubernetes"&gt;&lt;/p&gt;
&lt;p&gt;Sistema para orquestación de cluster. Esto no es un tutorial, son notas sueltas
(personales) tomadas del &lt;a href="https://kubernetes.io"&gt;tutorial oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;1. Crear un cluster&lt;/h3&gt;
&lt;p&gt;Kubernetes coordina un cluster para trabajar como una unica unidad. Para ello,
las apps necesitan ser empaquetadas en forma de containers.&lt;/p&gt;
&lt;p&gt;2 Recursos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Master: Coordinación y gestión el cluster&lt;/li&gt;
&lt;li&gt;Nodes: Son los workers del cluster (puede ser vm o nodo físico)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada nodo tiene un Kubelet, un agente que coordina el nodo y maneja la
comunicación con el Master.&lt;/p&gt;
&lt;p&gt;Cada nodo debe poder realizar operaciones de containers, usando Docker o rkt
(Debe tenerlo instalado).&lt;/p&gt;
&lt;p&gt;Para debug se recomienda utilizar &lt;a href="https://github.com/kubernetes/minikube"&gt;Minikube&lt;/a&gt;.
Instala un cluster y facilita la configuracion de kubernetes (Instalarlo a mano
era complejo).&lt;/p&gt;
&lt;h4&gt;Tutorial interactivo&lt;/h4&gt;
&lt;p&gt;Testear la version de minikube&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;minikube version
&lt;/pre&gt;


&lt;p&gt;Iniciar un cluster usando minikube&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;minikube start
&lt;/pre&gt;


&lt;p&gt;Linea de comandos de Kubernetes: &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Version de kubectl (Para verificar que esta instalado):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl version
&lt;/pre&gt;


&lt;p&gt;Ver información de cluster&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl cluster-info
&lt;/pre&gt;


&lt;p&gt;Ver nodos del cluster&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get nodes
&lt;/pre&gt;


&lt;h3&gt;2. Crear deploys con kubectl&lt;/h3&gt;
&lt;p&gt;Una vez instalado Kubernetes, se deben crear aplicaciones en containers para ser
ejecutadas sobre el cluster. Para esto se definen instruccion que el master
ejecuta sobre los nodos.&lt;/p&gt;
&lt;p&gt;Kubernetes Deployment Controller monitoriza las instancias y si se caen, las
regenera nuevamente.&lt;/p&gt;
&lt;h4&gt;Tutorial interactivo&lt;/h4&gt;
&lt;p&gt;Correr un ejemplo&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl run kubernetes-bootcamp \
    --image=docker.io/jocatalin/kubernetes-bootcamp:v1 \
    --port=8080
&lt;/pre&gt;


&lt;p&gt;Ver la app en ejecucion&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get deployments
&lt;/pre&gt;


&lt;p&gt;Generar un entrypoint al cluster (temporal para pruebas)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl proxy
&lt;/pre&gt;


&lt;h3&gt;3. Explorar la App&lt;/h3&gt;
&lt;p&gt;Un Pod es un conjunto de containers que ejecutan aplicaciones y sus recursos
asociados.&lt;/p&gt;
&lt;p&gt;Los Pods son creados por Kubernetes al realizar el deploy de la app. Se crean
siempre en un nodo.&lt;/p&gt;
&lt;p&gt;Operaciones mas usadas de &lt;code&gt;kubectl&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get
kubectl describe
kubectl logs
kubectl exec
&lt;/pre&gt;


&lt;h4&gt;Tutorial interactivo&lt;/h4&gt;
&lt;p&gt;Listar pods&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get pods
&lt;/pre&gt;


&lt;p&gt;Para obtener información detallada de los Pods&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl describe pods
&lt;/pre&gt;


&lt;p&gt;Para acceder a los Pods, que funcionan en una red aislada y privada, se utiliza
el &lt;code&gt;proxy&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl proxy
&lt;/pre&gt;


&lt;p&gt;Dicho proxy expone temporalmente la red y permite la comunicación con el host.
Esto se utiliza para acceder a la API de los Pods y realizar consultas de forma
directa (Por ejemplo, usando el comando &lt;code&gt;curl&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Para diversas operaciones con los pods, es necesario obtener el nombre que
Kubernetes le asigno al mismo. Un comando para hacer esto es:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export POD_NAME=$(kubectl get pods -o go-template --template '&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="nv"&gt;.items&lt;/span&gt;&lt;span class="cp"&gt;}}{{&lt;/span&gt;&lt;span class="nv"&gt;.metadata.name&lt;/span&gt;&lt;span class="cp"&gt;}}{{&lt;/span&gt;&lt;span class="s2"&gt;"\n"&lt;/span&gt;&lt;span class="cp"&gt;}}{{&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;')&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Para ver los logs:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl logs $POD_NAME
&lt;/pre&gt;


&lt;p&gt;Todo lo que los proceso envien a stdout es expuesto como logs del pod.&lt;/p&gt;
&lt;p&gt;Ejecutar comandos en un pod:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl exec $POD_NAME env
&lt;/pre&gt;


&lt;p&gt;Abrir una consola en un POD:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl exec -ti $POD_NAME bash
&lt;/pre&gt;


&lt;h3&gt;4. Usar un servicio para exponer la App&lt;/h3&gt;
&lt;p&gt;Los Pods pueden ser reemplazados si es necesario. Desde que cada Pod tiene una
IP unica, las aplicaciones no deberian conocer dichas IPs para poder conectarse
a los Pods, porque estos puede "morir".&lt;/p&gt;
&lt;p&gt;Los servicios en kubernetes proveen una abstraccion que permite establecer
politicas de acceso sobre un conjunto lógico de Pods.&lt;/p&gt;
&lt;p&gt;Los servicios permiten que a los pods se les adjunten labels, con diferentes
objetivos (taggear versiones, separar versiones para test, debug y produccion).&lt;/p&gt;
&lt;h4&gt;Tutorial interactivo&lt;/h4&gt;
&lt;p&gt;Listar servicios expuestos:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get services
&lt;/pre&gt;


&lt;p&gt;Exponer un servicio:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
&lt;/pre&gt;


&lt;p&gt;Ver detalles de servicios:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl describe services/kubernetes-bootcamp
&lt;/pre&gt;


&lt;p&gt;Ver que puerto fue abierto externamente:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="nv"&gt;.spec.ports&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;.nodePort&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;')&lt;/span&gt;
&lt;span class="x"&gt;echo NODE_PORT=$NODE_PORT&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Una vez expuesto, se puede consultar el servicio directamente con:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;curl host01:$NODE_PORT
&lt;/pre&gt;


&lt;p&gt;Consultar los pods que estan etiquetados con un label particular:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get pods -l run=kubernetes-bootcamp
&lt;/pre&gt;


&lt;p&gt;El label en el caso anterior es &lt;code&gt;run=kubernetes-bootcamp&lt;/code&gt;. Funciona
identicamente para consultar servicios:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get services -l run=kubernetes-bootcamp
&lt;/pre&gt;


&lt;p&gt;Obtener el nombre del POD&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export POD_NAME=$(kubectl get pods -o go-template --template '&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="nv"&gt;.items&lt;/span&gt;&lt;span class="cp"&gt;}}{{&lt;/span&gt;&lt;span class="nv"&gt;.metadata.name&lt;/span&gt;&lt;span class="cp"&gt;}}{{&lt;/span&gt;&lt;span class="s2"&gt;"\n"&lt;/span&gt;&lt;span class="cp"&gt;}}{{&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;')&lt;/span&gt;
&lt;span class="x"&gt;echo Name of the Pod: $POD_NAME&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Aplicar un nuevo label a un Pod:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl label pod $POD_NAME app=v1
&lt;/pre&gt;


&lt;p&gt;Consultar el label recien aplicado:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl describe pods $POD_NAME
kubectl get pods -l app=v1
&lt;/pre&gt;


&lt;p&gt;Borrar un servicio:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl delete service -l run=kubernetes-bootcamp
&lt;/pre&gt;


&lt;h3&gt;5. Multiples instancias de una App&lt;/h3&gt;
&lt;p&gt;Escalar es incrementar el numero de instancias o pods para poder manejar
incrementos de trafico en la aplicación. Los services manejan el trafico hacia
los pods mendiante un load-balancer.&lt;/p&gt;
&lt;h4&gt;Tutorial interactivo&lt;/h4&gt;
&lt;p&gt;Escalar (scale up) un deployment llamado kubernetes-bootcamp a 4 replicas:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl scale deployments/kubernetes-bootcamp --replicas=4
&lt;/pre&gt;


&lt;p&gt;Ver los deployments:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get deployments
&lt;/pre&gt;


&lt;p&gt;Controlar los pods (Tiene que haber 4):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get pods -o wide
&lt;/pre&gt;


&lt;p&gt;Ver el deployment de forma mas detallada:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl describe deployments/kubernetes-bootcamp
&lt;/pre&gt;


&lt;p&gt;Ver el servicio:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl describe services/kubernetes-bootcamp
&lt;/pre&gt;


&lt;p&gt;Recuperar el nodo:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="nv"&gt;.spec.ports&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;.nodePort&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;')&lt;/span&gt;
&lt;span class="x"&gt;echo NODE_PORT=$NODE_PORT&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Ejecutar varias veces:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;curl host01:$NODE_PORT
&lt;/pre&gt;


&lt;p&gt;Deberian responder diferentes pods de la misma app.&lt;/p&gt;
&lt;p&gt;Ejecutar ahora solo 2 replicas (Scale down):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl scale deployments/kubernetes-bootcamp --replicas=2
&lt;/pre&gt;


&lt;p&gt;Confirmar el cambio:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get deployments
&lt;/pre&gt;


&lt;h3&gt;6. Realizando actualizaciones progresivas&lt;/h3&gt;
&lt;p&gt;La idea es lograr actualizaciones sin que se experimente una caida del servicio,
esto permite poder actualizar las aplicaciones de forma mas seguida.&lt;/p&gt;
&lt;p&gt;Kubernetes permite esto mediante las Rolling Updates. Esto permite actualizar
sin tener downtimes y ademas puede ser revertido en caso de problemas
(rollbacks).&lt;/p&gt;
&lt;h4&gt;Tutorial interactivo&lt;/h4&gt;
&lt;p&gt;Ver imagen actual de los pods (Campo image):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl describe pods
&lt;/pre&gt;


&lt;p&gt;Actualizar la image:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
&lt;/pre&gt;


&lt;p&gt;Ver información de los Pods:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get pods
&lt;/pre&gt;


&lt;p&gt;No actualiza los viejos pods, sino que termina los anteirores y crea pods
nuevos.&lt;/p&gt;
&lt;p&gt;Verificar que la app actualizo:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;kubectl describe services/kubernetes-bootcamp&lt;/span&gt;
&lt;span class="x"&gt;export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="nv"&gt;.spec.ports&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;.nodePort&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;')&lt;/span&gt;
&lt;span class="x"&gt;echo NODE_PORT=$NODE_PORT&lt;/span&gt;
&lt;span class="x"&gt;curl host01:$NODE_PORT&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Tambien puede verificarse el exito mediante:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl rollout status deployments/kubernetes-bootcamp
&lt;/pre&gt;


&lt;p&gt;Deployar una version "con errores":&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v10
&lt;/pre&gt;


&lt;p&gt;Ver problemas:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl get deployments
kubectl get pods
kubectl describe pods
&lt;/pre&gt;


&lt;p&gt;Rollback:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;kubectl rollout undo deployments/kubernetes-bootcamp
kubectl get pods
kubectl describe pods
&lt;/pre&gt;


&lt;h2&gt;Dudas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;¿Un cluster kubernetes sirve para deploy de una app unica o muchas apps
 pueden convivir en el?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se pueden hacer deploys de varias apps y se iran acomodando en los recursos que
el cluster tenga disponibles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¿Un Pod es equivalente a un container?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un pod es un container de una aplicación en particular gestionado por kubernetes&lt;/p&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Al querer ejecutar &lt;code&gt;minikube start&lt;/code&gt; se obtiene el error "Error starting host: Error getting state for host: machine does not exist".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El error completo es:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ minikube start
Starting &lt;span class="nb"&gt;local&lt;/span&gt; Kubernetes v1.9.0 cluster...
Starting VM...
E0428 &lt;span class="m"&gt;17&lt;/span&gt;:06:43.557255   &lt;span class="m"&gt;18070&lt;/span&gt; start.go:159&lt;span class="o"&gt;]&lt;/span&gt; Error starting host: Error getting state &lt;span class="k"&gt;for&lt;/span&gt; host: machine does not exist.

 Retrying.
E0428 &lt;span class="m"&gt;17&lt;/span&gt;:06:43.557517   &lt;span class="m"&gt;18070&lt;/span&gt; start.go:165&lt;span class="o"&gt;]&lt;/span&gt; Error starting host:  Error getting state &lt;span class="k"&gt;for&lt;/span&gt; host: machine does not &lt;span class="nv"&gt;exist&lt;/span&gt;
&lt;span class="o"&gt;================================================================================&lt;/span&gt;
An error has occurred. Would you like to opt in to sending anonymized crash
information to minikube to &lt;span class="nb"&gt;help&lt;/span&gt; prevent future errors?
To opt out of these messages, run the command:
        minikube config &lt;span class="nb"&gt;set&lt;/span&gt; WantReportErrorPrompt &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;================================================================================&lt;/span&gt;
Please enter your response &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt;: n
&lt;/pre&gt;


&lt;p&gt;Esto me pasó a mi por borrar en algun momento la vm de Virtualbox que crea minikube. La forma mas facil de recuperarse de este error es:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ minikube delete
$ minikube start
&lt;/pre&gt;&lt;/div&gt;</description><category>cluster</category><category>containers</category><category>deploy</category><category>devops</category><category>kubernetes</category><category>orchestration</category><guid>http://tomasdelvechio.github.io/blog/algunas-notas-sobre-kubernetes/</guid><pubDate>Fri, 26 Jan 2018 03:18:56 GMT</pubDate></item></channel></rss>